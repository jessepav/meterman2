// bsh script to set up the system namespace

// put all the SystemAttributes into the global namespace

int CONCEALED        = SystemAttributes.CONCEALED   ;
int TAKEABLE         = SystemAttributes.TAKEABLE    ;
int EQUIPPABLE       = SystemAttributes.EQUIPPABLE  ;
int LIGHTSOURCE      = SystemAttributes.LIGHTSOURCE ;
int MOVEABLE         = SystemAttributes.MOVEABLE    ;
int CLOSED           = SystemAttributes.CLOSED      ;
int LOCKED           = SystemAttributes.LOCKED      ;
int ON               = SystemAttributes.ON          ;
int VISITED          = SystemAttributes.VISITED     ;
int DARK             = SystemAttributes.DARK        ;
int PROPER_NAME      = SystemAttributes.PROPER_NAME ;

// Some attribute utility methods

boolean hasAttr(Entity e, int attrNum) {
    return GameUtils.hasAttr(e, attrNum);
}

void setAttr(Entity e, int attrNum) {
    GameUtils.setAttr(e, attrNum);
}

void setAttr(Entity e, int attrNum, boolean value) {
    GameUtils.setAttr(e, attrNum, value);
}

boolean hasAttr(Room r, int attrNum) {
    return GameUtils.hasAttr(r, attrNum);
}

void setAttr(Room r, int attrNum) {
    GameUtils.setAttr(r, attrNum);
}

void setAttr(Room r, int attrNum, boolean value) {
    GameUtils.setAttr(r, attrNum, value);
}

// out() and outPassage() are used in ScriptSource scripts to emit text
// that will be gathered and returned as the value of getText().

/**
 Output a simple text string.
 @param text text to output
 */
void out(String text) {
    outputBuilder.append(text);
}

/**
 Output the text of a passage found in our bundle group.
 @param id passage ID to output
 */
void outPassage(String id) {
    outputBuilder.append(bundles.getPassage(id).getText());
}

// The print() and println() methods call the equivalent GameManager methods.

/**
 Print text to the main text area.
 */
void print(String text) {
    gm.print(text);
}

/**
 Print text followed by a newline to the main text area.
 */
void println(String text) {
    gm.println(text);
}

/** 
 If, on this turn, there is any text queued for output, inserts a blank line so that the
 next thing printed will appear as a new paragraph.
 */
void newPar() {
    gm.newPar();
}

