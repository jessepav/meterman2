<?xml version="1.0" encoding="UTF-8"?>

<!-- For for information, see the source for these classes:
      XBundle, WorldLoader, BaseEntityLoader, BaseRoomLoader, GameUtils, Dialogs -->

<!-- You can set the formatting properties of the XBundle by including certain attributes
     in its root element. These correspond to the setXxx() methods of the XBundle class.
     Valid values for paragraphStyle are "blank-line" and "indented". -->
<xbundle name="reference-bundle"
         escapeChar="@" spaceChar="Â¬" indentLength="4" paragraphStyle="blank-line">
  <passage id="simple-passage">
    Untemplated text. Every type of text element, however, can contain @[em]emphasized[/em] text.
  </passage>
  <passage id="templated-passage" format="ftl">
    [#if stateobj.variable == 2]
    Hello Jacque!@p
    [/#if]
    A passage templated using FreeMarker Template Language (FTL).
  </passage>
  <passage id="scripted-passage" script="bsh">
    out("BeanShell code. Use embedded escape sequences rather than escape characters.@n");
    // For example @n rather than \n.
  </passage>
  <passage id="format-string-passage" format="printf">
    The %s is a very interesting item.
  </passage>

  <entity id="basic-entity-variant-1">
    <loader>BaseEntityLoader.getInstance()</loader>
    <name>Old Tractor</name>
    <indefiniteArticle>an</indefiniteArticle>
    <description format="ftl">
      An old tractor with ${stateobj.numTires} tires.
    </description>
    <attributes>
      <attr>moveable</attr>
      <attr>lightsource</attr>
    </attributes>

    <!-- Entities and rooms can have custom string, integer, and boolean properties.
         These are handled by an instance of GameObjectProperties, and saved and restored
         with the game-state. -->
    <properties>
      <prop name="food" val="Lasagna" />  <!-- You can also use type="string" -->
      <prop name="calories" type="int" val="425" />
      <prop name="healthy" type="boolean" val="false" />
    </properties>
  </entity>

  <!-- You specify the initial placement of an entity by including either an 'inRoom' attribute
       or child element to place it in a room, or an 'inContainer' attribute or child element to
       place it in another entity (which must be a container). -->
  <entity id="basic-entity-variant-2" name="New Tractor" indefiniteArticle="a"
          attributes="moveable, lightsource" inRoom="grassy-field">
    <description passageRef="equipment-description" />
    <script>
      <![CDATA[
        void enterScope(Entity e) {
            gm.println(e.getName() + " rumbles at your approach.");
        }
      ]]>
    </script>
  </entity>

  <passage id="equipment-description" format="ftl">
    The ${entity.name} is a nice piece of equipment.
  </passage>

  <!-- Doors must not specify a room or container; rather, they appear in both of the rooms they connect. -->
  <entity id="door-entity" type="door" name="Iron Door" closedExitLabel="Iron Door" key="iron-key"
          attributes="closed">
    <description>A doughty iron door.</description>

    <!-- The door connects the N exit of dark-cave with the SW exit of grassy-field. -->
    <connects room1="dark-cave" pos1="N" room2="grassy-field" pos2="SW" />
  </entity>

  <entity id="iron-chest" type="container" inPrep="in" outPrep="from"
          capacity="10" attributes="closed, locked">
    <inRoom>small-hut</inRoom>
    <description>A doughty iron chest.</description>
    <key>brass-key</key>
  </entity>

  <entity id="cheese" attributes="takeable" inContainer="iron-chest">
    <description>A nice piece of cheese.</description>
  </entity>

  <room id="grassy-field" name="Grassy Field" exitName="Field">
    <description>
      A grassy field stretches out to the base of the cliffs.
    </description>
    <exits>
      <!-- These should not include exits connected by doors, as the door will handle those. -->
      <exit room="cliffs" pos="N" label="Vague Cliffs" />
      <exit room="small-hut" pos="X2" />
    </exits>
  </room>

  <!-- The player element must have an id of "player". -->
  <player id="player" inRoom="grassy-field">
    <inventory>
      <item>iron-key</item>
      <item>old-map</item>
      <item equipped="true">elvish-sword</item>
    </inventory>
  </player>

  <room id="dark-cave" type="dark"
        name="Rough Cave" darkName="Dark Rough Cave"
        exitName="Cave"
        attributes="dark">
    <description>A rough cave whose walls are decorated with rude carvings.</description>
    <darkDescription>The faintest hints of carvings are visible in the shadows.</darkDescription>
    <script>
      <![CDATA[
      // A scripted getDarkEntities() method will be called to return the list of entities found
      // in the room when it's dark.

      List getDarkEntities(DarkRoom r) {
          List entityList = new ArrayList(2);
          entityList.add(entities.get("vague-mound"));
          entityList.add(entities.get("dark-drawers"));
          return entityList;
      }
      ]]>
    </script>
    <exits>
      <exit room="cave-passage" pos="S"/>
    </exits>
  </room>

  <entity id="ivory-watch" name="Ivory Watch" attributes="takeable">
    <!-- description, passage, and script elements can provide a 'fileRef' attribute, in which
         case the text content of the element is read from an external file resolved as a sibling
         of the xbundle itself. -->
    <description fileRef="ivory-watch-description.ftl" format="ftl" />
  </entity>

  <!-- For use with Dialogs.loadDialogPassage()-->
  <dialog id="elephant-message" header="Elephant" button="Yes">
    Do you like elephants?
  </dialog>
  <dialog id="dolphin-message" header="Dolphin" button="Sure" image="dolphin-1" scale="3">
    Do you like dolphins?
  </dialog>

  <!-- For use with Dialogs.loadDialogSequence(). Note that the names of the child elements - in this
       case 'dialog' - don't matter, so long as they have the correct attributes.
       If noEscape="true" the user won't be allowed to terminate the sequence early by hitting escape
       or closing a dialog window. -->
  <sequence id="animal-sequence" defaultHeader="Animal" defaultButton="Okay"
            defaultImage="generic-water-creature" defaultScale="2" noEscape="true">
    <!-- the default header and button will be used if the item doesn't specify its own. -->
    <dialog passageRef="elephant-message" button="There's More" image="elephant-head" scale="2" />
    <dialog passageRef="dolphin-message" header="Aquatic" image="none" />
    <!-- a sequence item can provide its own text, rather than referencing a passage -->
    <dialog header="Mammoth Elephant" image="giant-da-xiang" scale="3">
      The mammoth elephant roars like the primeval beast that it is!
    </dialog>
  </sequence>

  <!-- For use with MMUI.loadImageMap() -->
  <imageMap id="image-map">
    <!-- path is relative to the game assets path. -->
    <image name="panther-head" path="images/panther-head.jpg" />
    <image name="watermelon" path="images/xigua.jpg" />
  </imageMap>

  <!-- For use with MMSound.loadSourceMap() -->
  <soundMap id="sound-map">
    <!-- path is relative to the game assets path. -->
    <source name="explosion-1" path="audio/explosion1.wav" />
    <!-- if music="true" the source will be streamed rather than preloaded. -->
    <source name="haunting-lullaby" path="audio/lullaby.ogg" music="true" />
  </soundMap>

  <!--
  You can register actions (with key-bindings) using GameUtils.registerActions(). See
  https://docs.oracle.com/javase/7/docs/api/javax/swing/KeyStroke.html#getKeyStroke(java.lang.String)
  for the syntax of the 'shortcut' attribute.
  -->
  <actions id="farmgame-actions">
    <action name="EAT" templateText="Eat" shortcut="shift E" />
    <action name="JUMP_IN_OUT" templateText="Jump %s" shortcut="ctrl J" />

    <!-- System action text can be changed as well, though you cannot change their shortcuts.-->
    <action name="WAIT" templateText="Abide" />
  </actions>

  <!--
  Topic maps can be used within interacting entity definitions or, to enable sharing among multiple
  entities and reloading, can appear at the top-level and referenced via 'topicmapRef', in
  which case they must have an 'id' attribute.

  There is a special value of removeTopics, "all", which will cause all current topics to be cleared.
  removeTopics is processed before addTopics, so you can use that to clear the slate before adding
  new topics.
  -->
  <topicmap id="farmer-topics">
    <!-- If a topic has an ID of "GREETING" and is the only topic in an interactor's current topics,
         then it will be chosen without prompting the user to select a topic. -->
    <topic id="GREETING" label="Hello" addTopics="weather, tractor" removeTopics="GREETING">
      <text>Hello there, neighbor! How'd like the farming life?</text>
    </topic>
    <topic id="weather" label="How 'bout that weather?">
      <addTopics>
        <t>storm</t>
      </addTopics>
      <removeTopics>
        <t>weather</t>
      </removeTopics>
      <text>
        The storm, it is a comin'.
      </text>
    </topic>
    <topic id="tractor" removeTopics="tractor">
      <label>That is one fine tractor you got there.</label>
      <text>Indeed, she's a real beaut.</text>
    </topic>
    <topic id="storm" label="What storm is that?" removeTopics="tractor, storm">
      <!-- In topic-map text sources, the variable 'entity' will be set to the entity with which
           the user is interacting. -->
      <text format="ftl">
        ${entity.defName} pauses for a moment, then says, "The giant cyclone
        of destruction is rumored to be in these parts. I can't think of nothing
        else no more."
      </text>
    </topic>
    <topic id="grain-elevator" label="Grain Elevator">
      <!-- A dialog will be displayed if a <dialog> element is given. See Dialogs.loadDialogPassage() -->
      <dialog header="Elevator" button="Whoa">
        The grain elevator is outstanding.
      </dialog>
    </topic>
    <topic id="family" label="Your family">
      <!-- Multiple dialogs will be displayed if a <sequence> element is given. See Dialogs.loadDialogSequence() -->
      <sequence defaultHeader="Family" defaultButton="And...">
        <item>My father was a farmer...</item>
        <item>...my mother was a farmer...</item>
        <item button="Done">...and I'm a farmer.</item>
      </sequence>
    </topic>
    <topic id="done" label="Nothing else, I guess">
      <text>Be seein' ya.</text>
    </topic>
    <!-- If a topic with an ID of "OTHER" is present, it will be displayed at the end of the topic list,
         and handling will be delegated to the scripted or subclassed interactOther() method. OTHER topics
         have no add- or remove-topics lists. -->
    <topic id="OTHER" label="Actually, I was thinking about...">
      <!-- The text of the OTHER topic will be used in the prompt dialog. -->
      <text>What were you thinking about?</text>
    </topic>
  </topicmap>

  <!--
    Interacting entities can be people, books, computers, etc. Anything that should handle topic maps.
    If the 'interactActionText' attribute is given, the text will be used in place of "Interact"
    in the entity's action list.
  -->
  <entity id="johnson" type="interacting" name="Johnson the Farmer" attributes="proper-name"
          inRoom="grassy-field" interactActionText="Talk">
    <description>A farmer with a long beard.</description>
    <topicmap topicmapRef="farmer-topics" />

    <!-- Set the collection of current topics.
         This could also be given as an attribute: topics="GREETING"-->
    <topics>
      <topic>GREETING</topic>
    </topics>

    <!-- If an exitTopic is specified, the interaction cycle will repeat until the entity runs out of topics,
         the user closes the topic selection dialog manually, or the topic with the given ID is chosen. -->
    <exitTopic>done</exitTopic>

    <!-- If present, these text sources will be used in place of the corresponding system messages. -->
    <promptMessage format="printf">  <!-- args: entity.defName -->
      What to you want to talk to %s about?
    </promptMessage>
    <noTopicsMessage format="printf">  <!-- args: entity.defName -->
      %s really has nothing to say to you.
    </noTopicsMessage>
  </entity>

  <entity id="oil-lamp" type="lamp" name="Oil Lamp" attributes="takeable"
          burnsFuel="true" fuelRemaining="20" lowFuelAmount="5"
          onText="lit" offText="doused" lightAction="Light" douseAction="Douse">
    <description>An old oil lamp.</description>
  </entity>

  <!-- For use with LookHandler.loadFromElement() -->
  <lookHandler id="outdoor-listener">
    <roomGroup rooms="grassy-field, baseball-diamond, beach">
      <!-- If paragraph="true" the text will be output in its own paragraph. -->
      <text format="ftl" paragraph="true">
        Over ${currentRoom.defName} you see gulls wheeling in endless circles.
      </text>
    </roomGroup>
    <roomGroup>
      <rooms>
        <r>dungeon</r>
        <r>cave</r>
        <r>oubliette</r>
      </rooms>
      <text>
        A crushing sense of claustrophobia attends the close walls.
      </text>
    </roomGroup>
  </lookHandler>

  <!-- For use with UiImageHandler.loadFromElement()
       If a room is not listed in the image entries, then 'defaultImage' will be used. If no defaultImage
       is given, then we show no image (as though defaultImage="none").
       There are two special image names: "none", for no image, and "default" for the default frame image. -->
  <frame-images id="frame-images-region1" defaultImage="game-logo">
    <image name="outdoor-region" rooms="grassy-field, baseball-diamond" />
    <image name="waterside">
      <rooms>
        <r>beach</r>
        <r>riverside</r>
        <r>lakefront</r>
      </rooms>
    </image>
    <image name="none" rooms="the-void" />
  </frame-images>

  <!-- For use with UiImageHandler.loadFromElement()
       If an entity is not listed in the image entries, then 'defaultImage' will be used. If no defaultImage
       is given, then we show no image (as though defaultImage="none").
       There is one special image names: "none", for no image. -->
  <entity-images id="entity-images-region1" defaultImage="none">
    <image name="mike-portrait" entities="mike" />
    <image name="cup" entities="iron-cup, brass-mug, coffee-cup" />
  </entity-images>
</xbundle>
