<?xml version="1.0" encoding="UTF-8"?>

<!-- For for information, see the source for these classes:
      XBundle, WorldLoader, BaseEntityLoader, BaseRoomLoader, GameUtils -->

<xbundle name="reference-bundle">
  <passage id="simple-passage">
    Untemplated text.
  </passage>
  <passage id="templated-passage" format="ftl">
    [#if stateobj.variable == 2]
    Hello Jacque!@p
    [/#if]
    A passage templated using FreeMarker Template Language (FTL).
  </passage>
  <passage id="scripted-passage" script="bsh">
    out("BeanShell code. Use embedded escape sequences rather than escape characters.@n");
    // For example @n rather than \n.
  </passage>
  <passage id="format-string-passage" format="printf">
    The %s is a very interesting item.
  </passage>

  <entity id="basic-entity-variant-1">
    <loader>BaseEntityLoader.getInstance()</loader>
    <name>Old Tractor</name>
    <indefiniteArticle>an</indefiniteArticle>
    <description format="ftl">
      An old tractor with ${stateobj.numTires} tires.
    </description>
    <attributes>
      <attr>moveable</attr>
      <attr>lightsource</attr>
    </attributes>
  </entity>

  <!-- You specify the initial placement of an entity by including either an 'inRoom' attribute
       or child element to place it in a room, or an 'inContainer' attribute or child element to
       place it in another entity (which must be a container). -->
  <entity id="basic-entity-variant-2" name="New Tractor" indefiniteArticle="a"
          attributes="moveable, lightsource" inRoom="grassy-field">
    <description passageId="equipment-description" />
    <script>
      <![CDATA[
        void enterScope(Entity e) {
            gm.println(e.getName() + " rumbles at your approach.");
        }
      ]]>
    </script>
  </entity>

  <passage id="equipment-description" format="ftl">
    The ${entity.name} is a nice piece of equipment.
  </passage>

  <!-- Doors must not specify a room or container; rather, they appear in both of the rooms they connect. -->
  <entity id="door-entity" type="door" name="Iron Door" closedExitLabel="Iron Door" key="iron-key"
          attributes="closed">
    <description>A doughty iron door.</description>

    <!-- The door connects the N exit of dark-cave with the SW exit of grassy-field. -->
    <connects room1="dark-cave" pos1="N" room2="grassy-field" pos2="SW" />
  </entity>

  <entity id="iron-chest" type="container" inPrep="in" outPrep="from"
          attributes="closed, locked">
    <inRoom>small-hut</inRoom>
    <description>A doughty iron chest.</description>
    <key>brass-key</key>
  </entity>

  <entity id="cheese" attributes="takeable" inContainer="iron-chest">
    <description>A nice piece of cheese.</description>
  </entity>

  <room id="grassy-field" name="Grassy Field" exitName="Field">
    <description>
      A grassy field stretches out to the base of the cliffs.
    </description>
    <exits>
      <!-- These should not include exits connected by doors, as the door will handle those. -->
      <exit room="cliffs" pos="N" label="Vague Cliffs" />
      <exit room="small-hut" pos="X2" />
    </exits>
  </room>

  <!-- The player element must have an id of "player". -->
  <player id="player" inRoom="grassy-field">
    <inventory>
      <item>iron-key</item>
      <item>old-map</item>
      <item equipped="true">elvish-sword</item>
    </inventory>
  </player>

  <room id="dark-cave" type="dark"
        name="Rough Cave" darkName="Dark Rough Cave"
        exitName="Cave"
        attributes="dark">
    <description>A rough cave whose walls are decorated with rude carvings.</description>
    <darkDescription>The faintest hints of carvings are visible in the shadows.</darkDescription>
    <script>
      <![CDATA[
      // A scripted getDarkEntities() method will be called to return the list of entities found
      // in the room when it's dark.

      List getDarkEntities(DarkRoom r) {
          List entityList = new ArrayList(2);
          entityList.add(entities.get("vague-mound"));
          entityList.add(entities.get("dark-drawers"));
          return entityList;
      }
      ]]>
    </script>
    <exits>
      <exit room="cave-passage" pos="S"/>
    </exits>
  </room>

  <entity id="ivory-watch" name="Ivory Watch" attributes="takeable">
    <!-- description, passage, and script elements can provide a 'fileRef' attribute, in which
         case the text content of the element is read from an external file resolved as a sibling
         of the xbundle itself. -->
    <description fileRef="ivory-watch-description.ftl" format="ftl" />
  </entity>

  <!-- For use with GameUtils.showPassage()-->
  <passage id="elephant-message" header="Elephant" button="Yes">
    Do you like elephants?
  </passage>
  <passage id="dolphin-message" header="Dolphin" button="Sure" image="dolphin-1" scale="3">
    Do you like dolphins?
  </passage>

  <!-- For use with GameUtils.showPassageSequence(). Note that the element names of both the top-level element
       and its children don't matter, so long as they have the correct attributes. -->
  <sequence id="animal-sequence" defaultHeader="Animal" defaultButton="Okay">
    <!-- the default header and button will be used if the item doesn't specify its own. -->
    <item passageId="elephant-message" button="There's More" image="elephant-head" scale="2" />
    <item passageId="dolphin-message" header="Aquatic" />
  </sequence>

  <!-- For use with MMUI.loadImageMap() -->
  <imageMap id="image-map">
    <!-- path is relative to the game assets path. -->
    <image name="panther-head" path="images/panther-head.jpg" />
    <image name="watermelon" path="images/xigua.jpg" />
  </imageMap>

  <!-- For use with MMSound.loadSourceMap() -->
  <soundMap id="sound-map">
    <!-- path is relative to the game assets path. -->
    <source name="explosion-1" path="audio/explosion1.wav" />
    <!-- if music="true" the source will be streamed rather than preloaded. -->
    <source name="haunting-lullaby" path="audio/lullaby.ogg" music="true" />
  </soundMap>

  <!--
  You can register actions (with key-bindings) using GameUtils.registerActions(). See
  https://docs.oracle.com/javase/7/docs/api/javax/swing/KeyStroke.html#getKeyStroke(java.lang.String)
  for the syntax of the 'shortcut' attribute.
  -->
  <actions id="farmgame-actions">
    <action name="EAT" templateText="Eat" shortcut="shift E" />
    <action name="JUMP_IN_OUT" templateText="Jump %s" shortcut="ctrl J" />

    <!-- System action text can be changed as well.-->
    <action name="WAIT" templateText="Abide" />
  </actions>

  <!--
  Topic maps can be used within talking entity definitions or, to enable sharing among multiple
  entities and reloading, can appear at the top-level and referenced via 'topicmapRef', in
  which case they must have an 'id' attribute.

  There is a special value of removeTopics, "all", which will cause all current topics to be cleared.
  removeTopics is processed before addTopics, so you can use that to clear the slate before adding
  new topics.
  -->
  <topicmap id="farmer-topics">
    <!-- If a topic has an ID of "GREETING" and is the only topic in a talker's current topics,
         then it will be chosen without prompting the user to select a topic. -->
    <topic id="GREETING" label="Hello" addTopics="weather, tractor" removeTopics="GREETING">
      <text>Hello there, neighbor! How'd like the farming life?</text>
    </topic>
    <topic id="weather" label="How 'bout that weather?">
      <addTopics>
        <t>storm</t>
      </addTopics>
      <removeTopics>
        <t>weather</t>
      </removeTopics>
      <text>
        The storm, it is a comin'.
      </text>
    </topic>
    <topic id="tractor" removeTopics="tractor">
      <label>That is one fine tractor you got there.</label>
      <text>Indeed, she's a real beaut.</text>
    </topic>
    <topic id="storm" label="What storm is that?" removeTopics="tractor, storm">
      <text format="ftl">
        ${entity.defName} pauses for a moment, then says, "The giant cyclone
        of destruction is rumored to be in these parts. I can't think of nothing
        else no more."
      </text>
    </topic>
  </topicmap>

  <entity id="johnson" type="talking" name="Johnson the Farmer" attributes="proper-name"
          inRoom="grassy-field">
    <description>A farmer with a long beard.</description>
    <topicmap topicmapRef="farmer-topics" />

    <!-- Set the collection of current topics.
         This could also be given as an attribute: topics="GREETING"-->
    <topics>
      <topic>GREETING</topic>
    </topics>
  </entity>

  <entity id="oil-lamp" type="lamp" name="Oil Lamp" attributes="takeable"
          burnsFuel="true" fuelRemaining="20" lowFuelAmount="5"
          onText="lit" offText="doused" lightAction="Light" douseAction="Douse">
    <description>An old oil lamp.</description>
  </entity>
</xbundle>
