<?xml version="1.0" encoding="UTF-8"?>

<!-- For for information, see the source for these classes:
      XBundle, WorldLoader, BaseEntityLoader, BaseRoomLoader, GameUtils -->

<xbundle name="reference-bundle">
  <passage id="simple-passage">
    Untemplated text.
  </passage>
  <passage id="templated-passage" format="ftl">
    [#if stateobj.variable == 2]
    Hello Jacque!@p
    [/#if]
    A passage templated using FreeMarker Template Language (FTL).
  </passage>
  <passage id="scripted-passage" script="bsh">
    out("BeanShell code. Use embedded escape sequences rather than escape characters.@n");
    // For example @n rather than \n.
  </passage>
  <passage id="format-string-passage" format="printf">
    The %s is a very interesting item.
  </passage>

  <entity id="basic-entity-variant-1">
    <loader>BaseEntityLoader.getInstance()</loader>
    <name>Old Tractor</name>
    <indefiniteArticle>an</indefiniteArticle>
    <description format="ftl">
      An old tractor with ${stateobj.numTires} tires.
    </description>
    <attributes>
      <attr>moveable</attr>
      <attr>lightsource</attr>
    </attributes>
  </entity>

  <!-- You specify the initial placement of an entity by including either an 'inRoom' attribute
       or child element to place it in a room, or an 'inContainer' attribute or child element to
       place it in another entity (which must be a container). -->
  <entity id="basic-entity-variant-2" name="New Tractor" indefiniteArticle="a"
          attributes="moveable, lightsource" inRoom="grassy-field">
    <description passageId="equipment-description" />
    <script>
      <![CDATA[
        void enterScope(Entity e) {
            gm.println(e.getName() + " rumbles at your approach.");
        }
      ]]>
    </script>
  </entity>

  <passage id="equipment-description" format="ftl">
    The ${entity.name} is a nice piece of equipment.
  </passage>

  <!-- Doors must not specify a room or container; rather, they appear in both of the rooms they connect. -->
  <entity id="door-entity" type="door" name="Iron Door" closedExitLabel="Iron Door" key="iron-key"
          attributes="closed">
    <description>A doughty iron door.</description>

    <!-- The door connects the N exit of dark-cave with the SW exit of grassy-field. -->
    <connects room1="dark-cave" pos1="N" room2="grassy-field" pos2="SW" />
  </entity>

  <entity id="iron-chest" type="container" inPrep="in" outPrep="from"
          attributes="closed, locked">
    <inRoom>small-hut</inRoom>
    <description>A doughty iron chest.</description>
    <key>brass-key</key>
  </entity>

  <entity id="cheese" attributes="takeable" inContainer="iron-chest">
    <description>A nice piece of cheese.</description>
  </entity>

  <room id="grassy-field" name="Grassy Field" exitName="Field">
    <description>
      A grassy field stretches out to the base of the cliffs.
    </description>
    <exits>
      <!-- These should not include exits connected by doors, as the door will handle those. -->
      <exit room="cliffs" pos="N" label="Vague Cliffs" />
      <exit room="small-hut" pos="X2" />
    </exits>
  </room>

  <!-- The player element must have an id of "player". -->
  <player id="player" inRoom="grassy-field">
    <inventory>
      <item>iron-key</item>
      <item>old-map</item>
      <item equipped="true">elvish-sword</item>
    </inventory>
  </player>

  <room id="dark-cave" type="dark"
        name="Rough Cave" darkName="Dark Rough Cave"
        exitName="Cave" darkExitName="Dark Cave"
        attributes="dark">
    <description>A rough cave whose walls are decorated with rude carvings.</description>
    <darkDescription>The faintest hints of carvings are visible in the shadows.</darkDescription>
    <exits>
      <exit room="cave-passage" pos="S"/>
    </exits>
  </room>

  <entity id="ivory-watch" name="Ivory Watch" attributes="takeable">
    <!-- description, passage, and script elements can provide a 'fileRef' attribute, in which
         case the text content of the element is read from an external file resolved as a sibling
         of the xbundle itself. -->
    <description fileRef="ivory-watch-description.ftl" format="ftl" />
  </entity>

  <!-- For use with GameUtils.showPassage()-->
  <passage id="elephant-message" header="Elephant" button="Yes">
    Do you like elephants?
  </passage>
  <passage id="dolphin-message" header="Dolphin" button="Sure">
    Do you like dolphins?
  </passage>

  <!-- For use with GameUtils.showPassageSequence(). Note that the element names of both the top-level element
       and its children don't matter, so long as they have the correct attributes. -->
  <sequence id="animal-sequence" defaultHeader="Animal" defaultButton="Okay">
    <!-- the default header and button will be used if the item doesn't specify its own. -->
    <item passageId="elephant-message" button="There's More" />
    <item passageId="dolphin-message" header="Aquatic" />
  </sequence>

</xbundle>
